(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{191:function(_,v,t){"use strict";t.r(v);var e=t(0),i=Object(e.a)({},function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"git命令使用记录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git命令使用记录","aria-hidden":"true"}},[_._v("#")]),_._v(" git命令使用记录")]),_._v(" "),t("h4",{attrs:{id:"一、从git官网下载安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、从git官网下载安装","aria-hidden":"true"}},[_._v("#")]),_._v(" 一、从"),t("a",{attrs:{href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"}},[_._v("git官网"),t("OutboundLink")],1),_._v("下载安装")]),_._v(" "),t("h4",{attrs:{id:"二、创建版本库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、创建版本库","aria-hidden":"true"}},[_._v("#")]),_._v(" 二、创建版本库")]),_._v(" "),t("p",[t("code",[_._v('cd <fileName> "执行" git init')])]),_._v(" "),t("h4",{attrs:{id:"三、删除版本库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、删除版本库","aria-hidden":"true"}},[_._v("#")]),_._v(" 三、删除版本库")]),_._v(" "),t("p",[t("code",[_._v("rm -rf .git")])]),_._v(" "),t("h4",{attrs:{id:"四、文件提交"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、文件提交","aria-hidden":"true"}},[_._v("#")]),_._v(" 四、文件提交")]),_._v(" "),t("ul",[t("li",[_._v("1、使用 "),t("code",[_._v("git status")]),_._v(" 查看状态")]),_._v(" "),t("li",[_._v("2、使用命令 "),t("code",[_._v("git add <file>")]),_._v(" 提交单个文件，"),t("code",[_._v("git add all")]),_._v(" 提交所有文件(包括新增和删除)。注：执行 "),t("code",[_._v("git add")]),_._v("是把要提交的文件从工作区添加到暂存区")]),_._v(" "),t("li",[_._v("3、使用命令 "),t("code",[_._v("git commit -m <message>")]),_._v("，"),t("code",[_._v("-m")]),_._v("后面输入的是本次提交说明。注：执行 "),t("code",[_._v("git commit -m <messag>")]),_._v(" 则把暂存区的文件提交到分支")]),_._v(" "),t("li",[_._v("4、指定忽略某个文件或文件夹不提交(配置语法)\n"),t("ul",[t("li",[_._v("首先在根目录新建.gitignore文件")]),_._v(" "),t("li",[t("code",[_._v("#")]),_._v("表示注释")]),_._v(" "),t("li",[_._v("以 "),t("code",[_._v("/")]),_._v(" 开头表示目录")]),_._v(" "),t("li",[_._v("以 "),t("code",[_._v("*")]),_._v(" 开头表示匹配多个字符")]),_._v(" "),t("li",[_._v("以 "),t("code",[_._v("?")]),_._v(" 开头表示匹配单个字符")]),_._v(" "),t("li",[_._v("以 "),t("code",[_._v("[]")]),_._v(" 开头表示包含单个字符的匹配列表")]),_._v(" "),t("li",[_._v("以 "),t("code",[_._v("!")]),_._v(" 开头表示不忽略")])])])]),_._v(" "),t("h4",{attrs:{id:"五、版本回退"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、版本回退","aria-hidden":"true"}},[_._v("#")]),_._v(" 五、版本回退")]),_._v(" "),t("ul",[t("li",[_._v("1、执行 "),t("code",[_._v("git log")]),_._v(" 查看最近到最远的提交日志")]),_._v(" "),t("li",[_._v("2、执行 "),t("code",[_._v("git reset --hard HEAD^")]),_._v(" 其中 "),t("code",[_._v("HEAD")]),_._v(" 表示当前版本，"),t("code",[_._v("HEAD^")]),_._v(" 表示上个版本，"),t("code",[_._v("HEAD^^")]),_._v("表示上上个版本，往上一百个版本写成 "),t("code",[_._v("HEAD~100")])]),_._v(" "),t("li",[_._v("3、指定回到某个版本 "),t("code",[_._v("git reset --hard commitId")]),_._v(" 其中 "),t("code",[_._v("commitId")]),_._v(" 执行 "),t("code",[_._v("git log")]),_._v(" 可以查看")])]),_._v(" "),t("h4",{attrs:{id:"六、撤销修改和删除文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、撤销修改和删除文件","aria-hidden":"true"}},[_._v("#")]),_._v(" 六、撤销修改和删除文件")]),_._v(" "),t("ul",[t("li",[_._v("撤销修改：\n"),t("ul",[t("li",[_._v("如果没从工作区添加到暂存区执行： "),t("code",[_._v("git checkout -- <file>")]),_._v("。执行 "),t("code",[_._v("git checkout -- <file>")]),_._v(" 其实是用版本库的版本替换工作区的版本(无论工作区是修改还是删除都可以一键还原)")]),_._v(" "),t("li",[_._v("如果添加到暂存区执行： "),t("code",[_._v("git reset HEAD <file>")]),_._v(" 可以把暂存区的修改撤销掉，重新放回工作区")])])]),_._v(" "),t("li",[_._v("删除文件：\n"),t("ul",[t("li",[_._v("执行 "),t("code",[_._v("git rm <file>")]),_._v("，在执行 "),t("code",[_._v("git commit -m <message>")]),_._v("彻底从版本库删除")])])])]),_._v(" "),t("h4",{attrs:{id:"七、远程仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、远程仓库","aria-hidden":"true"}},[_._v("#")]),_._v(" 七、远程仓库")]),_._v(" "),t("ul",[t("li",[_._v("把本地仓库的代码同步到远程仓库(用github举例)\n"),t("ul",[t("li",[_._v("1、执行 "),t("code",[_._v("git remote add origin <github仓库地址>")]),_._v("，"),t("code",[_._v("origin")]),_._v("表示远程仓库名")]),_._v(" "),t("li",[_._v("2、执行 "),t("code",[_._v("git push -u origin master")]),_._v("，"),t("code",[_._v("master")]),_._v("表示当前分支，默认没新建分支的情况下，git所有提交都在这分支上")]),_._v(" "),t("li",[_._v("3、从现在起，只要本地作了提交，就可以通过命令： "),t("code",[_._v("git push origin master")]),_._v(" 推送到远程仓库")])])]),_._v(" "),t("li",[_._v("从远程仓库克隆到本地\n"),t("ul",[t("li",[_._v("执行 "),t("code",[_._v("git clone <github仓库地址>")])])])])]),_._v(" "),t("h4",{attrs:{id:"八、分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、分支","aria-hidden":"true"}},[_._v("#")]),_._v(" 八、分支")]),_._v(" "),t("ul",[t("li",[_._v("命令：\n"),t("ul",[t("li",[_._v("查看分支: "),t("code",[_._v("git branch")])]),_._v(" "),t("li",[_._v("创建分支: "),t("code",[_._v("git branch <name>")])]),_._v(" "),t("li",[_._v("切换分支: "),t("code",[_._v("git checkout <name>")])]),_._v(" "),t("li",[_._v("创建+切换分支: "),t("code",[_._v("git checkout -b <name>")])]),_._v(" "),t("li",[_._v("合并某分支到当前分支: "),t("code",[_._v("git merge <name>")]),_._v("，如果需要保存合并分支记录，请使用："),t("code",[_._v('git merge --no-ff -m "<message>" <name>')]),_._v(" git默认Fast forward模式，删除分支后会丢失分支信息 "),t("code",[_._v("--no-ff")]),_._v("表示禁用Fast forward模式")]),_._v(" "),t("li",[_._v("删除分支: "),t("code",[_._v("git branch -d <name>")]),_._v(" ,如果需要删除一个未合并的分支使用大写的"),t("code",[_._v("-D")])]),_._v(" "),t("li",[_._v("储藏当前工作区: "),t("code",[_._v("git stash")])]),_._v(" "),t("li",[_._v("查看储藏记录: "),t("code",[_._v("git stash list")])]),_._v(" "),t("li",[_._v("恢复并删除储藏记录: "),t("code",[_._v("git stash pop")])])])])])])},[],!1,null,null,null);v.default=i.exports}}]);